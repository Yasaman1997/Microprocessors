;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 07/11/2018
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdlib.h>
;#include <delay.h>
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;// Declare your global variables here
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;// Voltage Reference: AREF pin
;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 0029 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 002A ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $0000000F VOL: 0
;	adc_input -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 002B // Delay needed for the stabilization of the ADC input voltage
; 0000 002C delay_us(10);
;PCODE: $00000013 VOL: 0
; 0000 002D // Start the AD conversion
; 0000 002E ADCSRA|=(1<<ADSC);
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 002F // Wait for the AD conversion to complete
; 0000 0030 while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0031 ADCSRA|=(1<<ADIF);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0032 return ADCW;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0033 }
;PCODE: $00000021 VOL: 0
;flash unsigned char temp[10];
;void main(void)
; 0000 0036 {
;PCODE: $00000022 VOL: 0
; 0000 0037 int i;
; 0000 0038      unsigned char buffer[10];
; 0000 0039 char str[20];
; 0000 003A int threshold;
; 0000 003B int temperature;
; 0000 003C 
; 0000 003D // Declare your local variables here
; 0000 003E 
; 0000 003F // Input/Output Ports initialization
; 0000 0040 // Port A initialization
; 0000 0041 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0042 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $00000023 VOL: 0
;	i -> R16,R17
;	buffer -> Y+20
;	str -> Y+0
;	threshold -> R18,R19
;	temperature -> R20,R21
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0043 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0044 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0045 
; 0000 0046 // Port B initialization
; 0000 0047 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0048 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0049 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 004A PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 004B 
; 0000 004C // Port C initialization
; 0000 004D // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=In Bit0=In
; 0000 004E DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 004F // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=T Bit0=T
; 0000 0050 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0051 
; 0000 0052 // Port D initialization
; 0000 0053 // Function: Bit7=Out Bit6=In Bit5=In Bit4=In Bit3=In Bit2=Out Bit1=In Bit0=In
; 0000 0054 DDRD=(1<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0055 // State: Bit7=0 Bit6=T Bit5=T Bit4=T Bit3=T Bit2=0 Bit1=T Bit0=T
; 0000 0056 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0057 
; 0000 0058 // Timer/Counter 0 initialization
; 0000 0059 // Clock source: System Clock
; 0000 005A // Clock value: Timer 0 Stopped
; 0000 005B // Mode: Normal top=0xFF
; 0000 005C // OC0 output: Disconnected
; 0000 005D TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 005E TCNT0=0x00;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 005F OCR0=0x00;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0060 
; 0000 0061 // Timer/Counter 1 initialization
; 0000 0062 // Clock source: System Clock
; 0000 0063 // Clock value: Timer1 Stopped
; 0000 0064 // Mode: Normal top=0xFFFF
; 0000 0065 // OC1A output: Disconnected
; 0000 0066 // OC1B output: Disconnected
; 0000 0067 // Noise Canceler: Off
; 0000 0068 // Input Capture on Falling Edge
; 0000 0069 // Timer1 Overflow Interrupt: Off
; 0000 006A // Input Capture Interrupt: Off
; 0000 006B // Compare A Match Interrupt: Off
; 0000 006C // Compare B Match Interrupt: Off
; 0000 006D TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 006E TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 006F TCNT1H=0x00;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0070 TCNT1L=0x00;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0071 ICR1H=0x00;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0072 ICR1L=0x00;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0073 OCR1AH=0x00;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0074 OCR1AL=0x00;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0075 OCR1BH=0x00;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0076 OCR1BL=0x00;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0077 
; 0000 0078 // Timer/Counter 2 initialization
; 0000 0079 // Clock source: System Clock
; 0000 007A // Clock value: Timer2 Stopped
; 0000 007B // Mode: Normal top=0xFF
; 0000 007C // OC2 output: Disconnected
; 0000 007D ASSR=0<<AS2;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 007E TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 007F TCNT2=0x00;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0080 OCR2=0x00;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0081 
; 0000 0082 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0083 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0084 
; 0000 0085 // External Interrupt(s) initialization
; 0000 0086 // INT0: Off
; 0000 0087 // INT1: Off
; 0000 0088 // INT2: Off
; 0000 0089 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 008A MCUCSR=(0<<ISC2);
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 008B 
; 0000 008C // USART initialization
; 0000 008D // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 008E // USART Receiver: Off
; 0000 008F // USART Transmitter: On
; 0000 0090 // USART Mode: Asynchronous
; 0000 0091 // USART Baud Rate: 9600
; 0000 0092 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0093 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0094 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0095 UBRRH=0x00;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0096 UBRRL=0x33;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0097 
; 0000 0098 // Analog Comparator initialization
; 0000 0099 // Analog Comparator: Off
; 0000 009A // The Analog Comparator's positive input is
; 0000 009B // connected to the AIN0 pin
; 0000 009C // The Analog Comparator's negative input is
; 0000 009D // connected to the AIN1 pin
; 0000 009E ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 009F 
; 0000 00A0 // ADC initialization
; 0000 00A1 // ADC Clock frequency: 1000.000 kHz
; 0000 00A2 // ADC Voltage Reference: AREF pin
; 0000 00A3 // ADC Auto Trigger Source: Free Running
; 0000 00A4 ADMUX=ADC_VREF_TYPE;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 00A5 ADCSRA=(1<<ADEN) | (0<<ADSC) | (1<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 00A6 SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 00A7 
; 0000 00A8 // SPI initialization
; 0000 00A9 // SPI disabled
; 0000 00AA SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 00AB 
; 0000 00AC // TWI initialization
; 0000 00AD // TWI disabled
; 0000 00AE TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 00AF 
; 0000 00B0 // Alphanumeric LCD initialization
; 0000 00B1 // Connections are specified in the
; 0000 00B2 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 00B3 // RS - PORTC Bit 2
; 0000 00B4 // RD - PORTC Bit 3
; 0000 00B5 // EN - PORTC Bit 4
; 0000 00B6 // D4 - PORTC Bit 5
; 0000 00B7 // D5 - PORTC Bit 6
; 0000 00B8 // D6 - PORTC Bit 7
; 0000 00B9 // D7 - PORTD Bit 2
; 0000 00BA // Characters/line: 16
; 0000 00BB lcd_init(16);
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 00BC 
; 0000 00BD             lcd_puts(" Microprocessor ");
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 00BE              lcd_gotoxy(0,1);
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 00BF              lcd_puts(" Final Project ");
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 00C0              delay_ms(1500);
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 00C1              lcd_gotoxy(0,0);
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 00C2              lcd_puts("   Yasaman M.    ");
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 00C3              lcd_gotoxy(0,1);
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 00C4              lcd_puts("   M.Navid Sh.  ");
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 00C5              delay_ms(1500);
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 00C6 
; 0000 00C7 while (1)
;PCODE: $00000090 VOL: 0
; 0000 00C8       {
; 0000 00C9 
; 0000 00CA              lcd_clear();
;PCODE: $00000091 VOL: 0
; 0000 00CB              lcd_gotoxy(0,0);
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 00CC 
; 0000 00CD              threshold = read_adc(0)*(0.48828125);
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00CE              temperature = read_adc(1)*(0.48828125);
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 00CF 
; 0000 00D0 
; 0000 00D1 
; 0000 00D2              // sprintf(str,"ADC0:%04u", read_adc(1));
; 0000 00D3              // str[0]='n';
; 0000 00D4             //  puts(str);
; 0000 00D5             lcd_puts("Threshold : ");
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00D6             itoa(threshold, buffer);
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 00D7             lcd_puts(buffer);
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 00D8 
; 0000 00D9             lcd_gotoxy(0,1);
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 00DA             lcd_puts("Temperature : ");
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 00DB             itoa(temperature , buffer);
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 00DC             lcd_puts(buffer);
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 00DD 
; 0000 00DE             if(temperature > threshold){
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00DF                 PORTD.7 = 1;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00E0             }else{
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 00E1                 PORTD.7 = 0;
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 00E2             }
;PCODE: $000000C1 VOL: 0
; 0000 00E3 
; 0000 00E4             printf("%d" , temperature);
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 00E5             printf("\n");
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 00E6 
; 0000 00E7             delay_ms(50);
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 00E8       }
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 00E9 }
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0

	.DSEG
_0x6:
	.BYTE 0x60
